{"version":3,"sources":["components/AlertMessage.js","gen/passwordGen.js","App.js","components/Header.js","index.js"],"names":["AlertMessage","props","componentDidMount","console","log","setState","message","componentWillUpdate","nextProps","nextState","render","state","Alert","variant","className","undefined","Component","generateRandomCharForPassword","chars","charAt","Math","floor","random","length","createPassword","hasNumbers","hasSymbols","password","i","App","useState","setPassword","isLoaded","setIsLoaded","window","screen","width","widthScreen","setWidthScreen","useForm","register","handleSubmit","errors","watch","useEffect","addEventListener","event","target","inputLength","Form","onSubmit","data","Control","id","type","placeholder","name","ref","required","min","value","max","pattern","Check","label","text","onClick","e","currentEl","classList","add","innerHTML","copyClick","Header","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e4d56dc2.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nimport './AlertMessage.css';\r\n\r\nclass AlertMessage extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state=\r\n\t\t{\r\n\t\t\tmessage:undefined\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount=()=>\r\n\t{\r\n\t\tconsole.log(\"componentDidMount\");\r\n\t\tthis.setState(\r\n\t\t{\r\n\t\t\tmessage:this.props.message\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentWillUpdate=(nextProps,nextState)=>\r\n\t{\r\n\t\tif(nextProps.message!==nextState.message)\r\n\t\t{\r\n\t\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tmessage:this.props.message\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender=()=>\r\n\t{\r\n\t\tconst {message}=this.state;\r\n\t\treturn(\r\n\t\t\t<Alert variant=\"danger\">\r\n\t\t\t\t<span className=\"alert_message\">{message}</span>\r\n\t\t\t</Alert>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AlertMessage;","const symbols='!%*)(}{?@#$~_-+=';\r\nconst numbers='0123456789';\r\nconst alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\nconst generateRandomCharForPassword=chars=>chars.charAt(Math.floor(Math.random()*chars.length));\r\n\r\nconst createPassword=(length,hasNumbers,hasSymbols)=>\r\n{\r\n\tlet chars=alphabet;\r\n\t\r\n\tchars+=(hasNumbers) ? numbers : '';\r\n\tchars+=(hasSymbols) ? symbols : '';\r\n\r\n\tlet password='';\r\n\r\n    for(let i=0;i<length;i++)\r\n    {\r\n    \tpassword+=generateRandomCharForPassword(chars);\r\n    }\r\n\r\n    return password;\r\n}\r\n\r\nexport default createPassword;","import React,{useState,useEffect} from 'react';\nimport './App.css';\n\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {Form} from 'react-bootstrap';\nimport {useForm} from 'react-hook-form';\n\nimport AlertMessage from './components/AlertMessage';\n\nimport createPassword from './gen/passwordGen';\n\nconst App=()=>\n{\n    const [password,setPassword]=useState('');\n    const [isLoaded,setIsLoaded]=useState(false);\n    const [widthScreen,setWidthScreen]=useState(window.screen.width);\n\n    const {register,handleSubmit,errors,watch}=useForm();\n    const hasSymbols=watch('hasSymbols');\n    const hasNumbers=watch('hasNumbers');\n\n    const infoAfterCreatePassword='You created password. You can create other password or copy current password.';\n    const info='For generate password you should click button Create password. Input number >6 without chars and not >30.';\n    const sizeWarningInfo='Your device should be with width not < 120 pixels. Or you should rotate device.';\n\n    const onSubmit=data=>\n    {\n      if(isLoaded)\n      {\n        setIsLoaded(false);\n      }\n        \n      setPassword(createPassword(data.inputLength,hasNumbers,hasSymbols));\n      setIsLoaded(true);\n    }\n\n    const copyClick=(e)=>\n    {\n      const currentEl=e.target;\n      currentEl.classList.add('copied');\n      currentEl.innerHTML='Copied password';\n    }\n\n    useEffect(()=>\n    {\n      window.addEventListener('resize',event=>\n      {\n        console.log('width:'+event.target.window.screen.width);\n        setWidthScreen(event.target.window.screen.width);\n      });\n    },[]);\n    \n    return (\n      <div>\n        <div className=\"div_alert\">\n          {errors.inputLength &&\n            <AlertMessage message={errors.inputLength.message}/>}\n        </div>\n        \n        <div className=\"div_warning-size text-danger\">\n          {sizeWarningInfo}\n        </div>\n\n        <Form className=\"form bg-success\" onSubmit={handleSubmit(onSubmit)}>\n          <span className=\"lbl text-warning\">Password settings</span>\n          {widthScreen>=320 &&\n            <Form.Control className=\"form-control-lg w-75\" id=\"passwordLength\" type=\"text\" placeholder=\"input length\" name=\"inputLength\" \n                ref={register(\n                {\n                  required:\"Password length is required\",\n                  min:\n                  {\n                    value:6,\n                    message:\"Password length must be >6\"\n                  },\n                  max:\n                  {\n                    value:30,\n                    message:\"Password length must be not >30\"\n                  },\n                  pattern:\n                  {\n                    value:/^[1-9]{1}[0-9]*$/i,\n                    message:\"Password length must be only number >0 without chars and mustn't start with zero\"\n                  }\n                })}/>\n          }\n          {(widthScreen<320 && widthScreen>=120) &&\n            <Form.Control className=\"form-control-sm w-75\" id=\"passwordLength\" type=\"text\" placeholder=\"input length\" name=\"inputLength\" \n                ref={register(\n                {\n                  required:\"Password length is required\",\n                  min:\n                  {\n                    value:6,\n                    message:\"Password length must be >6\"\n                  },\n                  max:\n                  {\n                    value:30,\n                    message:\"Password length must be not >30\"\n                  },\n                  pattern:\n                  {\n                    value:/^[1-9]{1}[0-9]*$/i,\n                    message:\"Password length must be only number >0 without chars and mustn't start with zero\"\n                  }\n                })}/>\n          }\n          \n          <div className=\"div_chb\">\n            <Form.Check className=\"chb text-warning\" type=\"checkbox\" name=\"hasNumbers\" label=\"Password has numbers\" \n              ref={register}/>\n            <Form.Check className=\"chb text-warning\" type=\"checkbox\" name=\"hasSymbols\" label=\"Password has symbols\"\n              ref={register}/>\n          </div>\n\n          <div className=\"div_info\">\n            <span className=\"info text-warning\">{info}</span>\n          </div>\n\n          <div className=\"div_create-button\">\n            <button className=\"button\" type=\"submit\">Create password</button>\n          </div>\n        </Form>\n        \n        <div className=\"div_password\">\n            {isLoaded &&\n              <div>\n                <span className=\"password text-success\">{password}</span>\n                <div className=\"div_info_after_create_password\">\n                  <span className=\"info_after_create_password text-info\">{infoAfterCreatePassword}</span>\n                </div>\n                <div className=\"div_copy-button\">\n                  <CopyToClipboard text={password}>\n                    <button className=\"button\" onClick={e=>copyClick(e)}>Copy password</button>\n                  </CopyToClipboard>\n                </div>\n              </div>\n            }\n        </div>\n      </div>\n    );\n};\n\nexport default App;","import './Header.css';\r\n\r\nconst Header=()=><header className=\"appHeader\">Generator password on React</header>\r\n\r\nexport default Header;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport Header from './components/Header';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n\t<div>\n\t\t<Header/>\n    \t<App/>\n\t</div>,\n  \tdocument.getElementById('root')\n);"],"sourceRoot":""}